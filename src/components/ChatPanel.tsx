import React, { useState, useRef, useEffect } from 'react';
import { Send, RefreshCw, Copy, ThumbsUp, ThumbsDown, Bookmark } from 'lucide-react';
import { useApp } from '../context/AppContext';

const ChatPanel: React.FC = () => {
  const { chatMessages, currentInput, setCurrentInput, addChatMessage } = useApp();
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(scrollToBottom, [chatMessages]);

  const handleSend = async () => {
    if (!currentInput.trim()) return;

    const userMessage = {
      id: Date.now().toString(),
      type: 'user' as const,
      content: currentInput,
      timestamp: new Date().toISOString(),
    };

    addChatMessage(userMessage);
    setCurrentInput('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const aiMessage = {
        id: (Date.now() + 1).toString(),
        type: 'ai' as const,
        content: `I understand you're asking about "${currentInput}". Based on your uploaded sources, I can provide insights and analysis. This is a simulated response that would normally be generated by an AI model with access to your documents.`,
        timestamp: new Date().toISOString(),
      };
      addChatMessage(aiMessage);
      setIsTyping(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const adjustTextareaHeight = () => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  };

  useEffect(() => {
    adjustTextareaHeight();
  }, [currentInput]);

  return (
    <div className="flex-1 flex flex-col h-full bg-gray-900">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-700">
        <h2 className="text-lg font-medium text-white">Chat</h2>
        <button className="flex items-center space-x-2 px-3 py-2 text-gray-400 hover:text-white transition-colors">
          <RefreshCw className="w-4 h-4" />
          <span className="text-sm">Refresh</span>
        </button>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-6">
        {chatMessages.map((message) => (
          <div key={message.id} className="space-y-2">
            {message.type === 'user' ? (
              <div className="flex justify-end">
                <div className="bg-blue-600 text-white px-4 py-2 rounded-2xl max-w-2xl">
                  <p className="text-sm">{message.content}</p>
                </div>
              </div>
            ) : (
              <div className="space-y-3">
                <div className="text-gray-300 text-sm leading-relaxed max-w-4xl">
                  {message.content}
                </div>
                <div className="flex items-center space-x-4">
                  <button className="flex items-center space-x-2 text-gray-400 hover:text-white transition-colors">
                    <Bookmark className="w-4 h-4" />
                    <span className="text-sm">Save to note</span>
                  </button>
                  <div className="flex items-center space-x-2">
                    <button className="p-1 text-gray-400 hover:text-white transition-colors">
                      <Copy className="w-4 h-4" />
                    </button>
                    <button className="p-1 text-gray-400 hover:text-white transition-colors">
                      <ThumbsUp className="w-4 h-4" />
                    </button>
                    <button className="p-1 text-gray-400 hover:text-white transition-colors">
                      <ThumbsDown className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        ))}

        {isTyping && (
          <div className="flex items-center space-x-2 text-gray-400">
            <div className="flex space-x-1">
              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="p-4 border-t border-gray-700">
        {/* Suggested Questions */}
        <div className="mb-4 flex space-x-2 overflow-x-auto">
          <button className="flex-shrink-0 px-3 py-2 bg-gray-800 hover:bg-gray-700 rounded-lg text-sm text-gray-300 transition-colors">
            What is the candidate's professional background and technical expertise?
          </button>
          <button className="flex-shrink-0 px-3 py-2 bg-gray-800 hover:bg-gray-700 rounded-lg text-sm text-gray-300 transition-colors">
            What specific projects and...
          </button>
        </div>

        {/* Input */}
        <div className="relative">
          <div className="flex items-end space-x-3 bg-gray-800 rounded-2xl p-3">
            <textarea
              ref={textareaRef}
              value={currentInput}
              onChange={(e) => setCurrentInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Start typing..."
              className="flex-1 bg-transparent text-white placeholder-gray-400 resize-none outline-none min-h-[24px] max-h-32"
              rows={1}
            />
            <div className="flex items-center space-x-2">
              <span className="text-xs text-gray-400">1 source</span>
              <button
                onClick={handleSend}
                disabled={!currentInput.trim()}
                className="p-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed rounded-full transition-colors"
              >
                <Send className="w-4 h-4 text-white" />
              </button>
            </div>
          </div>
        </div>

        {/* Footer */}
        <p className="text-xs text-gray-500 text-center mt-3">
          NotebookLM can be inaccurate, please double-check its responses.
        </p>
      </div>
    </div>
  );
};

export default ChatPanel;